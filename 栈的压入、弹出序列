输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，
序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。

#主要的是判断条件，怎么理解呢？用一个辅助栈 pushed的是用来做入栈的，那么popped则可以用来定死来作为判断循环 用i来循环
#剩下的就 入辅助栈和出辅助栈，则这个判断条件应该可以在入或者出的时候写。
#入来做判断，出写进循环，完美了！

class Solution:
    def validateStackSequences(self, pushed: List[int], popped: List[int]) -> bool:
        #判断出栈有哪些序列
        #用一个辅助的栈，循环判断出栈的元素 == pop栈的元素 
        #如果辅助栈为空 则说明是出栈序列，如果不为空，则返回False
        stack =[]
        i = 0
        for num in pushed:
            stack.append(num)
            while stack and stack[-1] == popped[i]:
                stack.pop()
                i +=1
        return not stack

